// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/containernetworking/cni/libcni"
	"github.com/containernetworking/cni/pkg/types"
)

type CNILibrary struct {
	AddNetworkStub        func(net *libcni.NetworkConfig, rt *libcni.RuntimeConf) (*types.Result, error)
	addNetworkMutex       sync.RWMutex
	addNetworkArgsForCall []struct {
		net *libcni.NetworkConfig
		rt  *libcni.RuntimeConf
	}
	addNetworkReturns struct {
		result1 *types.Result
		result2 error
	}
	DelNetworkStub        func(net *libcni.NetworkConfig, rt *libcni.RuntimeConf) error
	delNetworkMutex       sync.RWMutex
	delNetworkArgsForCall []struct {
		net *libcni.NetworkConfig
		rt  *libcni.RuntimeConf
	}
	delNetworkReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CNILibrary) AddNetwork(net *libcni.NetworkConfig, rt *libcni.RuntimeConf) (*types.Result, error) {
	fake.addNetworkMutex.Lock()
	fake.addNetworkArgsForCall = append(fake.addNetworkArgsForCall, struct {
		net *libcni.NetworkConfig
		rt  *libcni.RuntimeConf
	}{net, rt})
	fake.recordInvocation("AddNetwork", []interface{}{net, rt})
	fake.addNetworkMutex.Unlock()
	if fake.AddNetworkStub != nil {
		return fake.AddNetworkStub(net, rt)
	} else {
		return fake.addNetworkReturns.result1, fake.addNetworkReturns.result2
	}
}

func (fake *CNILibrary) AddNetworkCallCount() int {
	fake.addNetworkMutex.RLock()
	defer fake.addNetworkMutex.RUnlock()
	return len(fake.addNetworkArgsForCall)
}

func (fake *CNILibrary) AddNetworkArgsForCall(i int) (*libcni.NetworkConfig, *libcni.RuntimeConf) {
	fake.addNetworkMutex.RLock()
	defer fake.addNetworkMutex.RUnlock()
	return fake.addNetworkArgsForCall[i].net, fake.addNetworkArgsForCall[i].rt
}

func (fake *CNILibrary) AddNetworkReturns(result1 *types.Result, result2 error) {
	fake.AddNetworkStub = nil
	fake.addNetworkReturns = struct {
		result1 *types.Result
		result2 error
	}{result1, result2}
}

func (fake *CNILibrary) DelNetwork(net *libcni.NetworkConfig, rt *libcni.RuntimeConf) error {
	fake.delNetworkMutex.Lock()
	fake.delNetworkArgsForCall = append(fake.delNetworkArgsForCall, struct {
		net *libcni.NetworkConfig
		rt  *libcni.RuntimeConf
	}{net, rt})
	fake.recordInvocation("DelNetwork", []interface{}{net, rt})
	fake.delNetworkMutex.Unlock()
	if fake.DelNetworkStub != nil {
		return fake.DelNetworkStub(net, rt)
	} else {
		return fake.delNetworkReturns.result1
	}
}

func (fake *CNILibrary) DelNetworkCallCount() int {
	fake.delNetworkMutex.RLock()
	defer fake.delNetworkMutex.RUnlock()
	return len(fake.delNetworkArgsForCall)
}

func (fake *CNILibrary) DelNetworkArgsForCall(i int) (*libcni.NetworkConfig, *libcni.RuntimeConf) {
	fake.delNetworkMutex.RLock()
	defer fake.delNetworkMutex.RUnlock()
	return fake.delNetworkArgsForCall[i].net, fake.delNetworkArgsForCall[i].rt
}

func (fake *CNILibrary) DelNetworkReturns(result1 error) {
	fake.DelNetworkStub = nil
	fake.delNetworkReturns = struct {
		result1 error
	}{result1}
}

func (fake *CNILibrary) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addNetworkMutex.RLock()
	defer fake.addNetworkMutex.RUnlock()
	fake.delNetworkMutex.RLock()
	defer fake.delNetworkMutex.RUnlock()
	return fake.invocations
}

func (fake *CNILibrary) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
