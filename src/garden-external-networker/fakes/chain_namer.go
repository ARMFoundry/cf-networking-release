// This file was generated by counterfeiter
package fakes

import "sync"

type ChainNamer struct {
	NameStub        func(prefix, containerHandle string) string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
		prefix          string
		containerHandle string
	}
	nameReturns struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ChainNamer) Name(prefix string, containerHandle string) string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
		prefix          string
		containerHandle string
	}{prefix, containerHandle})
	fake.recordInvocation("Name", []interface{}{prefix, containerHandle})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub(prefix, containerHandle)
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *ChainNamer) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *ChainNamer) NameArgsForCall(i int) (string, string) {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return fake.nameArgsForCall[i].prefix, fake.nameArgsForCall[i].containerHandle
}

func (fake *ChainNamer) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *ChainNamer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return fake.invocations
}

func (fake *ChainNamer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
