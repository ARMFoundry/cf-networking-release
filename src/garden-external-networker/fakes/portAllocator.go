// This file was generated by counterfeiter
package fakes

import "sync"

type PortAllocator struct {
	AllocatePortStub        func(handle string, port int) (int, error)
	allocatePortMutex       sync.RWMutex
	allocatePortArgsForCall []struct {
		handle string
		port   int
	}
	allocatePortReturns struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PortAllocator) AllocatePort(handle string, port int) (int, error) {
	fake.allocatePortMutex.Lock()
	fake.allocatePortArgsForCall = append(fake.allocatePortArgsForCall, struct {
		handle string
		port   int
	}{handle, port})
	fake.recordInvocation("AllocatePort", []interface{}{handle, port})
	fake.allocatePortMutex.Unlock()
	if fake.AllocatePortStub != nil {
		return fake.AllocatePortStub(handle, port)
	} else {
		return fake.allocatePortReturns.result1, fake.allocatePortReturns.result2
	}
}

func (fake *PortAllocator) AllocatePortCallCount() int {
	fake.allocatePortMutex.RLock()
	defer fake.allocatePortMutex.RUnlock()
	return len(fake.allocatePortArgsForCall)
}

func (fake *PortAllocator) AllocatePortArgsForCall(i int) (string, int) {
	fake.allocatePortMutex.RLock()
	defer fake.allocatePortMutex.RUnlock()
	return fake.allocatePortArgsForCall[i].handle, fake.allocatePortArgsForCall[i].port
}

func (fake *PortAllocator) AllocatePortReturns(result1 int, result2 error) {
	fake.AllocatePortStub = nil
	fake.allocatePortReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *PortAllocator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allocatePortMutex.RLock()
	defer fake.allocatePortMutex.RUnlock()
	return fake.invocations
}

func (fake *PortAllocator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
