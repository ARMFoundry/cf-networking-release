// This file was generated by counterfeiter
package fakes

import (
	"lib/rules"
	"sync"

	"code.cloudfoundry.org/garden"
)

type NetOutRuleConverter struct {
	ConvertStub        func(rule garden.NetOutRule, containerIP string) []rules.GenericRule
	convertMutex       sync.RWMutex
	convertArgsForCall []struct {
		rule        garden.NetOutRule
		containerIP string
	}
	convertReturns struct {
		result1 []rules.GenericRule
	}
	BulkConvertStub        func(rules []garden.NetOutRule, containerIP string) []rules.GenericRule
	bulkConvertMutex       sync.RWMutex
	bulkConvertArgsForCall []struct {
		rules       []garden.NetOutRule
		containerIP string
	}
	bulkConvertReturns struct {
		result1 []rules.GenericRule
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetOutRuleConverter) Convert(rule garden.NetOutRule, containerIP string) []rules.GenericRule {
	fake.convertMutex.Lock()
	fake.convertArgsForCall = append(fake.convertArgsForCall, struct {
		rule        garden.NetOutRule
		containerIP string
	}{rule, containerIP})
	fake.recordInvocation("Convert", []interface{}{rule, containerIP})
	fake.convertMutex.Unlock()
	if fake.ConvertStub != nil {
		return fake.ConvertStub(rule, containerIP)
	} else {
		return fake.convertReturns.result1
	}
}

func (fake *NetOutRuleConverter) ConvertCallCount() int {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return len(fake.convertArgsForCall)
}

func (fake *NetOutRuleConverter) ConvertArgsForCall(i int) (garden.NetOutRule, string) {
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	return fake.convertArgsForCall[i].rule, fake.convertArgsForCall[i].containerIP
}

func (fake *NetOutRuleConverter) ConvertReturns(result1 []rules.GenericRule) {
	fake.ConvertStub = nil
	fake.convertReturns = struct {
		result1 []rules.GenericRule
	}{result1}
}

func (fake *NetOutRuleConverter) BulkConvert(rules []garden.NetOutRule, containerIP string) []rules.GenericRule {
	var rulesCopy []garden.NetOutRule
	if rules != nil {
		rulesCopy = make([]garden.NetOutRule, len(rules))
		copy(rulesCopy, rules)
	}
	fake.bulkConvertMutex.Lock()
	fake.bulkConvertArgsForCall = append(fake.bulkConvertArgsForCall, struct {
		rules       []garden.NetOutRule
		containerIP string
	}{rulesCopy, containerIP})
	fake.recordInvocation("BulkConvert", []interface{}{rulesCopy, containerIP})
	fake.bulkConvertMutex.Unlock()
	if fake.BulkConvertStub != nil {
		return fake.BulkConvertStub(rules, containerIP)
	} else {
		return fake.bulkConvertReturns.result1
	}
}

func (fake *NetOutRuleConverter) BulkConvertCallCount() int {
	fake.bulkConvertMutex.RLock()
	defer fake.bulkConvertMutex.RUnlock()
	return len(fake.bulkConvertArgsForCall)
}

func (fake *NetOutRuleConverter) BulkConvertArgsForCall(i int) ([]garden.NetOutRule, string) {
	fake.bulkConvertMutex.RLock()
	defer fake.bulkConvertMutex.RUnlock()
	return fake.bulkConvertArgsForCall[i].rules, fake.bulkConvertArgsForCall[i].containerIP
}

func (fake *NetOutRuleConverter) BulkConvertReturns(result1 []rules.GenericRule) {
	fake.BulkConvertStub = nil
	fake.bulkConvertReturns = struct {
		result1 []rules.GenericRule
	}{result1}
}

func (fake *NetOutRuleConverter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convertMutex.RLock()
	defer fake.convertMutex.RUnlock()
	fake.bulkConvertMutex.RLock()
	defer fake.bulkConvertMutex.RUnlock()
	return fake.invocations
}

func (fake *NetOutRuleConverter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
