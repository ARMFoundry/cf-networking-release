// This file was generated by counterfeiter
package fakes

import "sync"

type NetInProvider struct {
	InitializeStub        func(containerHandle string) error
	initializeMutex       sync.RWMutex
	initializeArgsForCall []struct {
		containerHandle string
	}
	initializeReturns struct {
		result1 error
	}
	CleanupStub        func(containerHandle string) error
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct {
		containerHandle string
	}
	cleanupReturns struct {
		result1 error
	}
	AddRuleStub        func(containerHandle string, hostPort, containerPort int, hostIP, containerIP string) error
	addRuleMutex       sync.RWMutex
	addRuleArgsForCall []struct {
		containerHandle string
		hostPort        int
		containerPort   int
		hostIP          string
		containerIP     string
	}
	addRuleReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetInProvider) Initialize(containerHandle string) error {
	fake.initializeMutex.Lock()
	fake.initializeArgsForCall = append(fake.initializeArgsForCall, struct {
		containerHandle string
	}{containerHandle})
	fake.recordInvocation("Initialize", []interface{}{containerHandle})
	fake.initializeMutex.Unlock()
	if fake.InitializeStub != nil {
		return fake.InitializeStub(containerHandle)
	} else {
		return fake.initializeReturns.result1
	}
}

func (fake *NetInProvider) InitializeCallCount() int {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return len(fake.initializeArgsForCall)
}

func (fake *NetInProvider) InitializeArgsForCall(i int) string {
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	return fake.initializeArgsForCall[i].containerHandle
}

func (fake *NetInProvider) InitializeReturns(result1 error) {
	fake.InitializeStub = nil
	fake.initializeReturns = struct {
		result1 error
	}{result1}
}

func (fake *NetInProvider) Cleanup(containerHandle string) error {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct {
		containerHandle string
	}{containerHandle})
	fake.recordInvocation("Cleanup", []interface{}{containerHandle})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		return fake.CleanupStub(containerHandle)
	} else {
		return fake.cleanupReturns.result1
	}
}

func (fake *NetInProvider) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *NetInProvider) CleanupArgsForCall(i int) string {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return fake.cleanupArgsForCall[i].containerHandle
}

func (fake *NetInProvider) CleanupReturns(result1 error) {
	fake.CleanupStub = nil
	fake.cleanupReturns = struct {
		result1 error
	}{result1}
}

func (fake *NetInProvider) AddRule(containerHandle string, hostPort int, containerPort int, hostIP string, containerIP string) error {
	fake.addRuleMutex.Lock()
	fake.addRuleArgsForCall = append(fake.addRuleArgsForCall, struct {
		containerHandle string
		hostPort        int
		containerPort   int
		hostIP          string
		containerIP     string
	}{containerHandle, hostPort, containerPort, hostIP, containerIP})
	fake.recordInvocation("AddRule", []interface{}{containerHandle, hostPort, containerPort, hostIP, containerIP})
	fake.addRuleMutex.Unlock()
	if fake.AddRuleStub != nil {
		return fake.AddRuleStub(containerHandle, hostPort, containerPort, hostIP, containerIP)
	} else {
		return fake.addRuleReturns.result1
	}
}

func (fake *NetInProvider) AddRuleCallCount() int {
	fake.addRuleMutex.RLock()
	defer fake.addRuleMutex.RUnlock()
	return len(fake.addRuleArgsForCall)
}

func (fake *NetInProvider) AddRuleArgsForCall(i int) (string, int, int, string, string) {
	fake.addRuleMutex.RLock()
	defer fake.addRuleMutex.RUnlock()
	return fake.addRuleArgsForCall[i].containerHandle, fake.addRuleArgsForCall[i].hostPort, fake.addRuleArgsForCall[i].containerPort, fake.addRuleArgsForCall[i].hostIP, fake.addRuleArgsForCall[i].containerIP
}

func (fake *NetInProvider) AddRuleReturns(result1 error) {
	fake.AddRuleStub = nil
	fake.addRuleReturns = struct {
		result1 error
	}{result1}
}

func (fake *NetInProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initializeMutex.RLock()
	defer fake.initializeMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	fake.addRuleMutex.RLock()
	defer fake.addRuleMutex.RUnlock()
	return fake.invocations
}

func (fake *NetInProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
