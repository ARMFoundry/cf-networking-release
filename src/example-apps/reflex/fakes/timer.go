// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"
)

type Timer struct {
	AfterStub        func() <-chan time.Time
	afterMutex       sync.RWMutex
	afterArgsForCall []struct{}
	afterReturns     struct {
		result1 <-chan time.Time
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Timer) After() <-chan time.Time {
	fake.afterMutex.Lock()
	fake.afterArgsForCall = append(fake.afterArgsForCall, struct{}{})
	fake.recordInvocation("After", []interface{}{})
	fake.afterMutex.Unlock()
	if fake.AfterStub != nil {
		return fake.AfterStub()
	} else {
		return fake.afterReturns.result1
	}
}

func (fake *Timer) AfterCallCount() int {
	fake.afterMutex.RLock()
	defer fake.afterMutex.RUnlock()
	return len(fake.afterArgsForCall)
}

func (fake *Timer) AfterReturns(result1 <-chan time.Time) {
	fake.AfterStub = nil
	fake.afterReturns = struct {
		result1 <-chan time.Time
	}{result1}
}

func (fake *Timer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.afterMutex.RLock()
	defer fake.afterMutex.RUnlock()
	return fake.invocations
}

func (fake *Timer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
