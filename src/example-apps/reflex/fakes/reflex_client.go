// This file was generated by counterfeiter
package fakes

import "sync"

type ReflexClient struct {
	GetAddressesViaRouterStub        func() ([]string, error)
	getAddressesViaRouterMutex       sync.RWMutex
	getAddressesViaRouterArgsForCall []struct{}
	getAddressesViaRouterReturns     struct {
		result1 []string
		result2 error
	}
	CheckInstanceStub        func(address string) bool
	checkInstanceMutex       sync.RWMutex
	checkInstanceArgsForCall []struct {
		address string
	}
	checkInstanceReturns struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReflexClient) GetAddressesViaRouter() ([]string, error) {
	fake.getAddressesViaRouterMutex.Lock()
	fake.getAddressesViaRouterArgsForCall = append(fake.getAddressesViaRouterArgsForCall, struct{}{})
	fake.recordInvocation("GetAddressesViaRouter", []interface{}{})
	fake.getAddressesViaRouterMutex.Unlock()
	if fake.GetAddressesViaRouterStub != nil {
		return fake.GetAddressesViaRouterStub()
	} else {
		return fake.getAddressesViaRouterReturns.result1, fake.getAddressesViaRouterReturns.result2
	}
}

func (fake *ReflexClient) GetAddressesViaRouterCallCount() int {
	fake.getAddressesViaRouterMutex.RLock()
	defer fake.getAddressesViaRouterMutex.RUnlock()
	return len(fake.getAddressesViaRouterArgsForCall)
}

func (fake *ReflexClient) GetAddressesViaRouterReturns(result1 []string, result2 error) {
	fake.GetAddressesViaRouterStub = nil
	fake.getAddressesViaRouterReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *ReflexClient) CheckInstance(address string) bool {
	fake.checkInstanceMutex.Lock()
	fake.checkInstanceArgsForCall = append(fake.checkInstanceArgsForCall, struct {
		address string
	}{address})
	fake.recordInvocation("CheckInstance", []interface{}{address})
	fake.checkInstanceMutex.Unlock()
	if fake.CheckInstanceStub != nil {
		return fake.CheckInstanceStub(address)
	} else {
		return fake.checkInstanceReturns.result1
	}
}

func (fake *ReflexClient) CheckInstanceCallCount() int {
	fake.checkInstanceMutex.RLock()
	defer fake.checkInstanceMutex.RUnlock()
	return len(fake.checkInstanceArgsForCall)
}

func (fake *ReflexClient) CheckInstanceArgsForCall(i int) string {
	fake.checkInstanceMutex.RLock()
	defer fake.checkInstanceMutex.RUnlock()
	return fake.checkInstanceArgsForCall[i].address
}

func (fake *ReflexClient) CheckInstanceReturns(result1 bool) {
	fake.CheckInstanceStub = nil
	fake.checkInstanceReturns = struct {
		result1 bool
	}{result1}
}

func (fake *ReflexClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAddressesViaRouterMutex.RLock()
	defer fake.getAddressesViaRouterMutex.RUnlock()
	fake.checkInstanceMutex.RLock()
	defer fake.checkInstanceMutex.RUnlock()
	return fake.invocations
}

func (fake *ReflexClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
