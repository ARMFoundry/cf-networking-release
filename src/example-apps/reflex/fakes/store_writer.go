// This file was generated by counterfeiter
package fakes

import "sync"

type StoreWriter struct {
	AddStub        func(addresses []string)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		addresses []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StoreWriter) Add(addresses []string) {
	var addressesCopy []string
	if addresses != nil {
		addressesCopy = make([]string, len(addresses))
		copy(addressesCopy, addresses)
	}
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		addresses []string
	}{addressesCopy})
	fake.recordInvocation("Add", []interface{}{addressesCopy})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		fake.AddStub(addresses)
	}
}

func (fake *StoreWriter) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *StoreWriter) AddArgsForCall(i int) []string {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].addresses
}

func (fake *StoreWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.invocations
}

func (fake *StoreWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
