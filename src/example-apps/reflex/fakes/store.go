// This file was generated by counterfeiter
package fakes

import "sync"

type Store struct {
	GetAddressesStub        func() []string
	getAddressesMutex       sync.RWMutex
	getAddressesArgsForCall []struct{}
	getAddressesReturns     struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Store) GetAddresses() []string {
	fake.getAddressesMutex.Lock()
	fake.getAddressesArgsForCall = append(fake.getAddressesArgsForCall, struct{}{})
	fake.recordInvocation("GetAddresses", []interface{}{})
	fake.getAddressesMutex.Unlock()
	if fake.GetAddressesStub != nil {
		return fake.GetAddressesStub()
	} else {
		return fake.getAddressesReturns.result1
	}
}

func (fake *Store) GetAddressesCallCount() int {
	fake.getAddressesMutex.RLock()
	defer fake.getAddressesMutex.RUnlock()
	return len(fake.getAddressesArgsForCall)
}

func (fake *Store) GetAddressesReturns(result1 []string) {
	fake.GetAddressesStub = nil
	fake.getAddressesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *Store) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAddressesMutex.RLock()
	defer fake.getAddressesMutex.RUnlock()
	return fake.invocations
}

func (fake *Store) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
