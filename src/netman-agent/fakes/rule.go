// This file was generated by counterfeiter
package fakes

import (
	"netman-agent/rules"
	"sync"

	"code.cloudfoundry.org/lager"
)

type Rule struct {
	EnforceStub        func(table, chain string, ipt rules.IPTables, logger lager.Logger) error
	enforceMutex       sync.RWMutex
	enforceArgsForCall []struct {
		table  string
		chain  string
		ipt    rules.IPTables
		logger lager.Logger
	}
	enforceReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Rule) Enforce(table string, chain string, ipt rules.IPTables, logger lager.Logger) error {
	fake.enforceMutex.Lock()
	fake.enforceArgsForCall = append(fake.enforceArgsForCall, struct {
		table  string
		chain  string
		ipt    rules.IPTables
		logger lager.Logger
	}{table, chain, ipt, logger})
	fake.recordInvocation("Enforce", []interface{}{table, chain, ipt, logger})
	fake.enforceMutex.Unlock()
	if fake.EnforceStub != nil {
		return fake.EnforceStub(table, chain, ipt, logger)
	} else {
		return fake.enforceReturns.result1
	}
}

func (fake *Rule) EnforceCallCount() int {
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	return len(fake.enforceArgsForCall)
}

func (fake *Rule) EnforceArgsForCall(i int) (string, string, rules.IPTables, lager.Logger) {
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	return fake.enforceArgsForCall[i].table, fake.enforceArgsForCall[i].chain, fake.enforceArgsForCall[i].ipt, fake.enforceArgsForCall[i].logger
}

func (fake *Rule) EnforceReturns(result1 error) {
	fake.EnforceStub = nil
	fake.enforceReturns = struct {
		result1 error
	}{result1}
}

func (fake *Rule) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	return fake.invocations
}

func (fake *Rule) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rules.Rule = new(Rule)
