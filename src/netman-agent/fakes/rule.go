// This file was generated by counterfeiter
package fakes

import (
	"netman-agent/rules"
	"sync"
)

type Rule struct {
	EnforceStub        func(string) error
	enforceMutex       sync.RWMutex
	enforceArgsForCall []struct {
		arg1 string
	}
	enforceReturns struct {
		result1 error
	}
	ChainStub        func(int64) string
	chainMutex       sync.RWMutex
	chainArgsForCall []struct {
		arg1 int64
	}
	chainReturns struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Rule) Enforce(arg1 string) error {
	fake.enforceMutex.Lock()
	fake.enforceArgsForCall = append(fake.enforceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Enforce", []interface{}{arg1})
	fake.enforceMutex.Unlock()
	if fake.EnforceStub != nil {
		return fake.EnforceStub(arg1)
	} else {
		return fake.enforceReturns.result1
	}
}

func (fake *Rule) EnforceCallCount() int {
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	return len(fake.enforceArgsForCall)
}

func (fake *Rule) EnforceArgsForCall(i int) string {
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	return fake.enforceArgsForCall[i].arg1
}

func (fake *Rule) EnforceReturns(result1 error) {
	fake.EnforceStub = nil
	fake.enforceReturns = struct {
		result1 error
	}{result1}
}

func (fake *Rule) Chain(arg1 int64) string {
	fake.chainMutex.Lock()
	fake.chainArgsForCall = append(fake.chainArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("Chain", []interface{}{arg1})
	fake.chainMutex.Unlock()
	if fake.ChainStub != nil {
		return fake.ChainStub(arg1)
	} else {
		return fake.chainReturns.result1
	}
}

func (fake *Rule) ChainCallCount() int {
	fake.chainMutex.RLock()
	defer fake.chainMutex.RUnlock()
	return len(fake.chainArgsForCall)
}

func (fake *Rule) ChainArgsForCall(i int) int64 {
	fake.chainMutex.RLock()
	defer fake.chainMutex.RUnlock()
	return fake.chainArgsForCall[i].arg1
}

func (fake *Rule) ChainReturns(result1 string) {
	fake.ChainStub = nil
	fake.chainReturns = struct {
		result1 string
	}{result1}
}

func (fake *Rule) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	fake.chainMutex.RLock()
	defer fake.chainMutex.RUnlock()
	return fake.invocations
}

func (fake *Rule) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rules.Rule = new(Rule)
