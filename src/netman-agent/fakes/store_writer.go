// This file was generated by counterfeiter
package fakes

import "sync"

type StoreWriter struct {
	AddStub        func(containerID, groupID, IP string) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		containerID string
		groupID     string
		IP          string
	}
	addReturns struct {
		result1 error
	}
	DelStub        func(containerID string) error
	delMutex       sync.RWMutex
	delArgsForCall []struct {
		containerID string
	}
	delReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StoreWriter) Add(containerID string, groupID string, IP string) error {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		containerID string
		groupID     string
		IP          string
	}{containerID, groupID, IP})
	fake.recordInvocation("Add", []interface{}{containerID, groupID, IP})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(containerID, groupID, IP)
	} else {
		return fake.addReturns.result1
	}
}

func (fake *StoreWriter) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *StoreWriter) AddArgsForCall(i int) (string, string, string) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].containerID, fake.addArgsForCall[i].groupID, fake.addArgsForCall[i].IP
}

func (fake *StoreWriter) AddReturns(result1 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *StoreWriter) Del(containerID string) error {
	fake.delMutex.Lock()
	fake.delArgsForCall = append(fake.delArgsForCall, struct {
		containerID string
	}{containerID})
	fake.recordInvocation("Del", []interface{}{containerID})
	fake.delMutex.Unlock()
	if fake.DelStub != nil {
		return fake.DelStub(containerID)
	} else {
		return fake.delReturns.result1
	}
}

func (fake *StoreWriter) DelCallCount() int {
	fake.delMutex.RLock()
	defer fake.delMutex.RUnlock()
	return len(fake.delArgsForCall)
}

func (fake *StoreWriter) DelArgsForCall(i int) string {
	fake.delMutex.RLock()
	defer fake.delMutex.RUnlock()
	return fake.delArgsForCall[i].containerID
}

func (fake *StoreWriter) DelReturns(result1 error) {
	fake.DelStub = nil
	fake.delReturns = struct {
		result1 error
	}{result1}
}

func (fake *StoreWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.delMutex.RLock()
	defer fake.delMutex.RUnlock()
	return fake.invocations
}

func (fake *StoreWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
