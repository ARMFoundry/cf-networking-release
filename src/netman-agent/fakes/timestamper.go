// This file was generated by counterfeiter
package fakes

import (
	"netman-agent/rules"
	"sync"
)

type TimeStamper struct {
	CurrentTimeStub        func() int
	currentTimeMutex       sync.RWMutex
	currentTimeArgsForCall []struct{}
	currentTimeReturns     struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TimeStamper) CurrentTime() int {
	fake.currentTimeMutex.Lock()
	fake.currentTimeArgsForCall = append(fake.currentTimeArgsForCall, struct{}{})
	fake.recordInvocation("CurrentTime", []interface{}{})
	fake.currentTimeMutex.Unlock()
	if fake.CurrentTimeStub != nil {
		return fake.CurrentTimeStub()
	} else {
		return fake.currentTimeReturns.result1
	}
}

func (fake *TimeStamper) CurrentTimeCallCount() int {
	fake.currentTimeMutex.RLock()
	defer fake.currentTimeMutex.RUnlock()
	return len(fake.currentTimeArgsForCall)
}

func (fake *TimeStamper) CurrentTimeReturns(result1 int) {
	fake.CurrentTimeStub = nil
	fake.currentTimeReturns = struct {
		result1 int
	}{result1}
}

func (fake *TimeStamper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.currentTimeMutex.RLock()
	defer fake.currentTimeMutex.RUnlock()
	return fake.invocations
}

func (fake *TimeStamper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rules.TimeStamper = new(TimeStamper)
