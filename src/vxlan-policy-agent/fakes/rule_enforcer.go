// This file was generated by counterfeiter
package fakes

import (
	"lib/rules"
	"sync"
	"vxlan-policy-agent/enforcer"
)

type RuleEnforcer struct {
	EnforceRulesAndChainStub        func(enforcer.RulesWithChain) error
	enforceRulesAndChainMutex       sync.RWMutex
	enforceRulesAndChainArgsForCall []struct {
		arg1 enforcer.RulesWithChain
	}
	enforceRulesAndChainReturns struct {
		result1 error
	}
	EnforceOnChainStub        func(chain enforcer.Chain, r []rules.Rule) error
	enforceOnChainMutex       sync.RWMutex
	enforceOnChainArgsForCall []struct {
		chain enforcer.Chain
		r     []rules.Rule
	}
	enforceOnChainReturns struct {
		result1 error
	}
	EnforceStub        func(table, parentChain, chain string, r []rules.Rule) error
	enforceMutex       sync.RWMutex
	enforceArgsForCall []struct {
		table       string
		parentChain string
		chain       string
		r           []rules.Rule
	}
	enforceReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RuleEnforcer) EnforceRulesAndChain(arg1 enforcer.RulesWithChain) error {
	fake.enforceRulesAndChainMutex.Lock()
	fake.enforceRulesAndChainArgsForCall = append(fake.enforceRulesAndChainArgsForCall, struct {
		arg1 enforcer.RulesWithChain
	}{arg1})
	fake.recordInvocation("EnforceRulesAndChain", []interface{}{arg1})
	fake.enforceRulesAndChainMutex.Unlock()
	if fake.EnforceRulesAndChainStub != nil {
		return fake.EnforceRulesAndChainStub(arg1)
	} else {
		return fake.enforceRulesAndChainReturns.result1
	}
}

func (fake *RuleEnforcer) EnforceRulesAndChainCallCount() int {
	fake.enforceRulesAndChainMutex.RLock()
	defer fake.enforceRulesAndChainMutex.RUnlock()
	return len(fake.enforceRulesAndChainArgsForCall)
}

func (fake *RuleEnforcer) EnforceRulesAndChainArgsForCall(i int) enforcer.RulesWithChain {
	fake.enforceRulesAndChainMutex.RLock()
	defer fake.enforceRulesAndChainMutex.RUnlock()
	return fake.enforceRulesAndChainArgsForCall[i].arg1
}

func (fake *RuleEnforcer) EnforceRulesAndChainReturns(result1 error) {
	fake.EnforceRulesAndChainStub = nil
	fake.enforceRulesAndChainReturns = struct {
		result1 error
	}{result1}
}

func (fake *RuleEnforcer) EnforceOnChain(chain enforcer.Chain, r []rules.Rule) error {
	var rCopy []rules.Rule
	if r != nil {
		rCopy = make([]rules.Rule, len(r))
		copy(rCopy, r)
	}
	fake.enforceOnChainMutex.Lock()
	fake.enforceOnChainArgsForCall = append(fake.enforceOnChainArgsForCall, struct {
		chain enforcer.Chain
		r     []rules.Rule
	}{chain, rCopy})
	fake.recordInvocation("EnforceOnChain", []interface{}{chain, rCopy})
	fake.enforceOnChainMutex.Unlock()
	if fake.EnforceOnChainStub != nil {
		return fake.EnforceOnChainStub(chain, r)
	} else {
		return fake.enforceOnChainReturns.result1
	}
}

func (fake *RuleEnforcer) EnforceOnChainCallCount() int {
	fake.enforceOnChainMutex.RLock()
	defer fake.enforceOnChainMutex.RUnlock()
	return len(fake.enforceOnChainArgsForCall)
}

func (fake *RuleEnforcer) EnforceOnChainArgsForCall(i int) (enforcer.Chain, []rules.Rule) {
	fake.enforceOnChainMutex.RLock()
	defer fake.enforceOnChainMutex.RUnlock()
	return fake.enforceOnChainArgsForCall[i].chain, fake.enforceOnChainArgsForCall[i].r
}

func (fake *RuleEnforcer) EnforceOnChainReturns(result1 error) {
	fake.EnforceOnChainStub = nil
	fake.enforceOnChainReturns = struct {
		result1 error
	}{result1}
}

func (fake *RuleEnforcer) Enforce(table string, parentChain string, chain string, r []rules.Rule) error {
	var rCopy []rules.Rule
	if r != nil {
		rCopy = make([]rules.Rule, len(r))
		copy(rCopy, r)
	}
	fake.enforceMutex.Lock()
	fake.enforceArgsForCall = append(fake.enforceArgsForCall, struct {
		table       string
		parentChain string
		chain       string
		r           []rules.Rule
	}{table, parentChain, chain, rCopy})
	fake.recordInvocation("Enforce", []interface{}{table, parentChain, chain, rCopy})
	fake.enforceMutex.Unlock()
	if fake.EnforceStub != nil {
		return fake.EnforceStub(table, parentChain, chain, r)
	} else {
		return fake.enforceReturns.result1
	}
}

func (fake *RuleEnforcer) EnforceCallCount() int {
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	return len(fake.enforceArgsForCall)
}

func (fake *RuleEnforcer) EnforceArgsForCall(i int) (string, string, string, []rules.Rule) {
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	return fake.enforceArgsForCall[i].table, fake.enforceArgsForCall[i].parentChain, fake.enforceArgsForCall[i].chain, fake.enforceArgsForCall[i].r
}

func (fake *RuleEnforcer) EnforceReturns(result1 error) {
	fake.EnforceStub = nil
	fake.enforceReturns = struct {
		result1 error
	}{result1}
}

func (fake *RuleEnforcer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enforceRulesAndChainMutex.RLock()
	defer fake.enforceRulesAndChainMutex.RUnlock()
	fake.enforceOnChainMutex.RLock()
	defer fake.enforceOnChainMutex.RUnlock()
	fake.enforceMutex.RLock()
	defer fake.enforceMutex.RUnlock()
	return fake.invocations
}

func (fake *RuleEnforcer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ enforcer.RuleEnforcer = new(RuleEnforcer)
