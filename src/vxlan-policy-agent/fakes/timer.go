// This file was generated by counterfeiter
package fakes

import "sync"

type Timer struct {
	ElapsedTimeStub        func(start, end int64) (float64, error)
	elapsedTimeMutex       sync.RWMutex
	elapsedTimeArgsForCall []struct {
		start int64
		end   int64
	}
	elapsedTimeReturns struct {
		result1 float64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Timer) ElapsedTime(start int64, end int64) (float64, error) {
	fake.elapsedTimeMutex.Lock()
	fake.elapsedTimeArgsForCall = append(fake.elapsedTimeArgsForCall, struct {
		start int64
		end   int64
	}{start, end})
	fake.recordInvocation("ElapsedTime", []interface{}{start, end})
	fake.elapsedTimeMutex.Unlock()
	if fake.ElapsedTimeStub != nil {
		return fake.ElapsedTimeStub(start, end)
	} else {
		return fake.elapsedTimeReturns.result1, fake.elapsedTimeReturns.result2
	}
}

func (fake *Timer) ElapsedTimeCallCount() int {
	fake.elapsedTimeMutex.RLock()
	defer fake.elapsedTimeMutex.RUnlock()
	return len(fake.elapsedTimeArgsForCall)
}

func (fake *Timer) ElapsedTimeArgsForCall(i int) (int64, int64) {
	fake.elapsedTimeMutex.RLock()
	defer fake.elapsedTimeMutex.RUnlock()
	return fake.elapsedTimeArgsForCall[i].start, fake.elapsedTimeArgsForCall[i].end
}

func (fake *Timer) ElapsedTimeReturns(result1 float64, result2 error) {
	fake.ElapsedTimeStub = nil
	fake.elapsedTimeReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *Timer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.elapsedTimeMutex.RLock()
	defer fake.elapsedTimeMutex.RUnlock()
	return fake.invocations
}

func (fake *Timer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
