// This file was generated by counterfeiter
package fakes

import "sync"

type SecurityGroupCLIAdapter struct {
	SecurityGroupStub        func(name string) (string, error)
	securityGroupMutex       sync.RWMutex
	securityGroupArgsForCall []struct {
		name string
	}
	securityGroupReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SecurityGroupCLIAdapter) SecurityGroup(name string) (string, error) {
	fake.securityGroupMutex.Lock()
	fake.securityGroupArgsForCall = append(fake.securityGroupArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("SecurityGroup", []interface{}{name})
	fake.securityGroupMutex.Unlock()
	if fake.SecurityGroupStub != nil {
		return fake.SecurityGroupStub(name)
	} else {
		return fake.securityGroupReturns.result1, fake.securityGroupReturns.result2
	}
}

func (fake *SecurityGroupCLIAdapter) SecurityGroupCallCount() int {
	fake.securityGroupMutex.RLock()
	defer fake.securityGroupMutex.RUnlock()
	return len(fake.securityGroupArgsForCall)
}

func (fake *SecurityGroupCLIAdapter) SecurityGroupArgsForCall(i int) string {
	fake.securityGroupMutex.RLock()
	defer fake.securityGroupMutex.RUnlock()
	return fake.securityGroupArgsForCall[i].name
}

func (fake *SecurityGroupCLIAdapter) SecurityGroupReturns(result1 string, result2 error) {
	fake.SecurityGroupStub = nil
	fake.securityGroupReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *SecurityGroupCLIAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.securityGroupMutex.RLock()
	defer fake.securityGroupMutex.RUnlock()
	return fake.invocations
}

func (fake *SecurityGroupCLIAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
