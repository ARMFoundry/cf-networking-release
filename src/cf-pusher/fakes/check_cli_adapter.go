// This file was generated by counterfeiter
package fakes

import "sync"

type CheckCLIAdapter struct {
	OrgGuidStub        func(name string) (string, error)
	orgGuidMutex       sync.RWMutex
	orgGuidArgsForCall []struct {
		name string
	}
	orgGuidReturns struct {
		result1 string
		result2 error
	}
	AppCountStub        func(orgGuid string) (int, error)
	appCountMutex       sync.RWMutex
	appCountArgsForCall []struct {
		orgGuid string
	}
	appCountReturns struct {
		result1 int
		result2 error
	}
	CheckAppStub        func(guid string) ([]byte, error)
	checkAppMutex       sync.RWMutex
	checkAppArgsForCall []struct {
		guid string
	}
	checkAppReturns struct {
		result1 []byte
		result2 error
	}
	AppGuidStub        func(name string) (string, error)
	appGuidMutex       sync.RWMutex
	appGuidArgsForCall []struct {
		name string
	}
	appGuidReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CheckCLIAdapter) OrgGuid(name string) (string, error) {
	fake.orgGuidMutex.Lock()
	fake.orgGuidArgsForCall = append(fake.orgGuidArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("OrgGuid", []interface{}{name})
	fake.orgGuidMutex.Unlock()
	if fake.OrgGuidStub != nil {
		return fake.OrgGuidStub(name)
	} else {
		return fake.orgGuidReturns.result1, fake.orgGuidReturns.result2
	}
}

func (fake *CheckCLIAdapter) OrgGuidCallCount() int {
	fake.orgGuidMutex.RLock()
	defer fake.orgGuidMutex.RUnlock()
	return len(fake.orgGuidArgsForCall)
}

func (fake *CheckCLIAdapter) OrgGuidArgsForCall(i int) string {
	fake.orgGuidMutex.RLock()
	defer fake.orgGuidMutex.RUnlock()
	return fake.orgGuidArgsForCall[i].name
}

func (fake *CheckCLIAdapter) OrgGuidReturns(result1 string, result2 error) {
	fake.OrgGuidStub = nil
	fake.orgGuidReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CheckCLIAdapter) AppCount(orgGuid string) (int, error) {
	fake.appCountMutex.Lock()
	fake.appCountArgsForCall = append(fake.appCountArgsForCall, struct {
		orgGuid string
	}{orgGuid})
	fake.recordInvocation("AppCount", []interface{}{orgGuid})
	fake.appCountMutex.Unlock()
	if fake.AppCountStub != nil {
		return fake.AppCountStub(orgGuid)
	} else {
		return fake.appCountReturns.result1, fake.appCountReturns.result2
	}
}

func (fake *CheckCLIAdapter) AppCountCallCount() int {
	fake.appCountMutex.RLock()
	defer fake.appCountMutex.RUnlock()
	return len(fake.appCountArgsForCall)
}

func (fake *CheckCLIAdapter) AppCountArgsForCall(i int) string {
	fake.appCountMutex.RLock()
	defer fake.appCountMutex.RUnlock()
	return fake.appCountArgsForCall[i].orgGuid
}

func (fake *CheckCLIAdapter) AppCountReturns(result1 int, result2 error) {
	fake.AppCountStub = nil
	fake.appCountReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *CheckCLIAdapter) CheckApp(guid string) ([]byte, error) {
	fake.checkAppMutex.Lock()
	fake.checkAppArgsForCall = append(fake.checkAppArgsForCall, struct {
		guid string
	}{guid})
	fake.recordInvocation("CheckApp", []interface{}{guid})
	fake.checkAppMutex.Unlock()
	if fake.CheckAppStub != nil {
		return fake.CheckAppStub(guid)
	} else {
		return fake.checkAppReturns.result1, fake.checkAppReturns.result2
	}
}

func (fake *CheckCLIAdapter) CheckAppCallCount() int {
	fake.checkAppMutex.RLock()
	defer fake.checkAppMutex.RUnlock()
	return len(fake.checkAppArgsForCall)
}

func (fake *CheckCLIAdapter) CheckAppArgsForCall(i int) string {
	fake.checkAppMutex.RLock()
	defer fake.checkAppMutex.RUnlock()
	return fake.checkAppArgsForCall[i].guid
}

func (fake *CheckCLIAdapter) CheckAppReturns(result1 []byte, result2 error) {
	fake.CheckAppStub = nil
	fake.checkAppReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *CheckCLIAdapter) AppGuid(name string) (string, error) {
	fake.appGuidMutex.Lock()
	fake.appGuidArgsForCall = append(fake.appGuidArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("AppGuid", []interface{}{name})
	fake.appGuidMutex.Unlock()
	if fake.AppGuidStub != nil {
		return fake.AppGuidStub(name)
	} else {
		return fake.appGuidReturns.result1, fake.appGuidReturns.result2
	}
}

func (fake *CheckCLIAdapter) AppGuidCallCount() int {
	fake.appGuidMutex.RLock()
	defer fake.appGuidMutex.RUnlock()
	return len(fake.appGuidArgsForCall)
}

func (fake *CheckCLIAdapter) AppGuidArgsForCall(i int) string {
	fake.appGuidMutex.RLock()
	defer fake.appGuidMutex.RUnlock()
	return fake.appGuidArgsForCall[i].name
}

func (fake *CheckCLIAdapter) AppGuidReturns(result1 string, result2 error) {
	fake.AppGuidStub = nil
	fake.appGuidReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CheckCLIAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.orgGuidMutex.RLock()
	defer fake.orgGuidMutex.RUnlock()
	fake.appCountMutex.RLock()
	defer fake.appCountMutex.RUnlock()
	fake.checkAppMutex.RLock()
	defer fake.checkAppMutex.RUnlock()
	fake.appGuidMutex.RLock()
	defer fake.appGuidMutex.RUnlock()
	return fake.invocations
}

func (fake *CheckCLIAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
