// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/db"
	"sync"
)

type TerminalRepo struct {
	CreateTerminalStub        func(tx db.Transaction) (int64, error)
	createTerminalMutex       sync.RWMutex
	createTerminalArgsForCall []struct {
		tx db.Transaction
	}
	createTerminalReturns struct {
		result1 int64
		result2 error
	}
	createTerminalReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TerminalRepo) CreateTerminal(tx db.Transaction) (int64, error) {
	fake.createTerminalMutex.Lock()
	ret, specificReturn := fake.createTerminalReturnsOnCall[len(fake.createTerminalArgsForCall)]
	fake.createTerminalArgsForCall = append(fake.createTerminalArgsForCall, struct {
		tx db.Transaction
	}{tx})
	fake.recordInvocation("CreateTerminal", []interface{}{tx})
	fake.createTerminalMutex.Unlock()
	if fake.CreateTerminalStub != nil {
		return fake.CreateTerminalStub(tx)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createTerminalReturns.result1, fake.createTerminalReturns.result2
}

func (fake *TerminalRepo) CreateTerminalCallCount() int {
	fake.createTerminalMutex.RLock()
	defer fake.createTerminalMutex.RUnlock()
	return len(fake.createTerminalArgsForCall)
}

func (fake *TerminalRepo) CreateTerminalArgsForCall(i int) db.Transaction {
	fake.createTerminalMutex.RLock()
	defer fake.createTerminalMutex.RUnlock()
	return fake.createTerminalArgsForCall[i].tx
}

func (fake *TerminalRepo) CreateTerminalReturns(result1 int64, result2 error) {
	fake.CreateTerminalStub = nil
	fake.createTerminalReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *TerminalRepo) CreateTerminalReturnsOnCall(i int, result1 int64, result2 error) {
	fake.CreateTerminalStub = nil
	if fake.createTerminalReturnsOnCall == nil {
		fake.createTerminalReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.createTerminalReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *TerminalRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTerminalMutex.RLock()
	defer fake.createTerminalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TerminalRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
