// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"
)

type MetricsEmitter struct {
	EmitAllStub        func(map[string]time.Duration)
	emitAllMutex       sync.RWMutex
	emitAllArgsForCall []struct {
		arg1 map[string]time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MetricsEmitter) EmitAll(arg1 map[string]time.Duration) {
	fake.emitAllMutex.Lock()
	fake.emitAllArgsForCall = append(fake.emitAllArgsForCall, struct {
		arg1 map[string]time.Duration
	}{arg1})
	fake.recordInvocation("EmitAll", []interface{}{arg1})
	fake.emitAllMutex.Unlock()
	if fake.EmitAllStub != nil {
		fake.EmitAllStub(arg1)
	}
}

func (fake *MetricsEmitter) EmitAllCallCount() int {
	fake.emitAllMutex.RLock()
	defer fake.emitAllMutex.RUnlock()
	return len(fake.emitAllArgsForCall)
}

func (fake *MetricsEmitter) EmitAllArgsForCall(i int) map[string]time.Duration {
	fake.emitAllMutex.RLock()
	defer fake.emitAllMutex.RUnlock()
	return fake.emitAllArgsForCall[i].arg1
}

func (fake *MetricsEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.emitAllMutex.RLock()
	defer fake.emitAllMutex.RUnlock()
	return fake.invocations
}

func (fake *MetricsEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
