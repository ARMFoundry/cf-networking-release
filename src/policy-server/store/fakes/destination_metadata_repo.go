// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/db"
	"sync"
)

type DestinationMetadataRepo struct {
	CreateDestinationMetadataStub        func(tx db.Transaction, terminalID int64, name, description string) (int64, error)
	createDestinationMetadataMutex       sync.RWMutex
	createDestinationMetadataArgsForCall []struct {
		tx          db.Transaction
		terminalID  int64
		name        string
		description string
	}
	createDestinationMetadataReturns struct {
		result1 int64
		result2 error
	}
	createDestinationMetadataReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DestinationMetadataRepo) CreateDestinationMetadata(tx db.Transaction, terminalID int64, name string, description string) (int64, error) {
	fake.createDestinationMetadataMutex.Lock()
	ret, specificReturn := fake.createDestinationMetadataReturnsOnCall[len(fake.createDestinationMetadataArgsForCall)]
	fake.createDestinationMetadataArgsForCall = append(fake.createDestinationMetadataArgsForCall, struct {
		tx          db.Transaction
		terminalID  int64
		name        string
		description string
	}{tx, terminalID, name, description})
	fake.recordInvocation("CreateDestinationMetadata", []interface{}{tx, terminalID, name, description})
	fake.createDestinationMetadataMutex.Unlock()
	if fake.CreateDestinationMetadataStub != nil {
		return fake.CreateDestinationMetadataStub(tx, terminalID, name, description)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDestinationMetadataReturns.result1, fake.createDestinationMetadataReturns.result2
}

func (fake *DestinationMetadataRepo) CreateDestinationMetadataCallCount() int {
	fake.createDestinationMetadataMutex.RLock()
	defer fake.createDestinationMetadataMutex.RUnlock()
	return len(fake.createDestinationMetadataArgsForCall)
}

func (fake *DestinationMetadataRepo) CreateDestinationMetadataArgsForCall(i int) (db.Transaction, int64, string, string) {
	fake.createDestinationMetadataMutex.RLock()
	defer fake.createDestinationMetadataMutex.RUnlock()
	return fake.createDestinationMetadataArgsForCall[i].tx, fake.createDestinationMetadataArgsForCall[i].terminalID, fake.createDestinationMetadataArgsForCall[i].name, fake.createDestinationMetadataArgsForCall[i].description
}

func (fake *DestinationMetadataRepo) CreateDestinationMetadataReturns(result1 int64, result2 error) {
	fake.CreateDestinationMetadataStub = nil
	fake.createDestinationMetadataReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *DestinationMetadataRepo) CreateDestinationMetadataReturnsOnCall(i int, result1 int64, result2 error) {
	fake.CreateDestinationMetadataStub = nil
	if fake.createDestinationMetadataReturnsOnCall == nil {
		fake.createDestinationMetadataReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.createDestinationMetadataReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *DestinationMetadataRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDestinationMetadataMutex.RLock()
	defer fake.createDestinationMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DestinationMetadataRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
