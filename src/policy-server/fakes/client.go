// This file was generated by counterfeiter
package fakes

import (
	"policy-server/handlers"
	"sync"
)

type Client struct {
	GetSpaceGuidsStub        func(appGuids []string) ([]string, error)
	getSpaceGuidsMutex       sync.RWMutex
	getSpaceGuidsArgsForCall []struct {
		appGuids []string
	}
	getSpaceGuidsReturns struct {
		result1 []string
		result2 error
	}
	GetSpacesStub        func(spaceGuids []string) ([]handlers.Space, error)
	getSpacesMutex       sync.RWMutex
	getSpacesArgsForCall []struct {
		spaceGuids []string
	}
	getSpacesReturns struct {
		result1 []handlers.Space
		result2 error
	}
	GetUserSpacesStub        func(userGuid string, spaces []handlers.Space) ([]handlers.Space, error)
	getUserSpacesMutex       sync.RWMutex
	getUserSpacesArgsForCall []struct {
		userGuid string
		spaces   []handlers.Space
	}
	getUserSpacesReturns struct {
		result1 []handlers.Space
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Client) GetSpaceGuids(appGuids []string) ([]string, error) {
	var appGuidsCopy []string
	if appGuids != nil {
		appGuidsCopy = make([]string, len(appGuids))
		copy(appGuidsCopy, appGuids)
	}
	fake.getSpaceGuidsMutex.Lock()
	fake.getSpaceGuidsArgsForCall = append(fake.getSpaceGuidsArgsForCall, struct {
		appGuids []string
	}{appGuidsCopy})
	fake.recordInvocation("GetSpaceGuids", []interface{}{appGuidsCopy})
	fake.getSpaceGuidsMutex.Unlock()
	if fake.GetSpaceGuidsStub != nil {
		return fake.GetSpaceGuidsStub(appGuids)
	} else {
		return fake.getSpaceGuidsReturns.result1, fake.getSpaceGuidsReturns.result2
	}
}

func (fake *Client) GetSpaceGuidsCallCount() int {
	fake.getSpaceGuidsMutex.RLock()
	defer fake.getSpaceGuidsMutex.RUnlock()
	return len(fake.getSpaceGuidsArgsForCall)
}

func (fake *Client) GetSpaceGuidsArgsForCall(i int) []string {
	fake.getSpaceGuidsMutex.RLock()
	defer fake.getSpaceGuidsMutex.RUnlock()
	return fake.getSpaceGuidsArgsForCall[i].appGuids
}

func (fake *Client) GetSpaceGuidsReturns(result1 []string, result2 error) {
	fake.GetSpaceGuidsStub = nil
	fake.getSpaceGuidsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *Client) GetSpaces(spaceGuids []string) ([]handlers.Space, error) {
	var spaceGuidsCopy []string
	if spaceGuids != nil {
		spaceGuidsCopy = make([]string, len(spaceGuids))
		copy(spaceGuidsCopy, spaceGuids)
	}
	fake.getSpacesMutex.Lock()
	fake.getSpacesArgsForCall = append(fake.getSpacesArgsForCall, struct {
		spaceGuids []string
	}{spaceGuidsCopy})
	fake.recordInvocation("GetSpaces", []interface{}{spaceGuidsCopy})
	fake.getSpacesMutex.Unlock()
	if fake.GetSpacesStub != nil {
		return fake.GetSpacesStub(spaceGuids)
	} else {
		return fake.getSpacesReturns.result1, fake.getSpacesReturns.result2
	}
}

func (fake *Client) GetSpacesCallCount() int {
	fake.getSpacesMutex.RLock()
	defer fake.getSpacesMutex.RUnlock()
	return len(fake.getSpacesArgsForCall)
}

func (fake *Client) GetSpacesArgsForCall(i int) []string {
	fake.getSpacesMutex.RLock()
	defer fake.getSpacesMutex.RUnlock()
	return fake.getSpacesArgsForCall[i].spaceGuids
}

func (fake *Client) GetSpacesReturns(result1 []handlers.Space, result2 error) {
	fake.GetSpacesStub = nil
	fake.getSpacesReturns = struct {
		result1 []handlers.Space
		result2 error
	}{result1, result2}
}

func (fake *Client) GetUserSpaces(userGuid string, spaces []handlers.Space) ([]handlers.Space, error) {
	var spacesCopy []handlers.Space
	if spaces != nil {
		spacesCopy = make([]handlers.Space, len(spaces))
		copy(spacesCopy, spaces)
	}
	fake.getUserSpacesMutex.Lock()
	fake.getUserSpacesArgsForCall = append(fake.getUserSpacesArgsForCall, struct {
		userGuid string
		spaces   []handlers.Space
	}{userGuid, spacesCopy})
	fake.recordInvocation("GetUserSpaces", []interface{}{userGuid, spacesCopy})
	fake.getUserSpacesMutex.Unlock()
	if fake.GetUserSpacesStub != nil {
		return fake.GetUserSpacesStub(userGuid, spaces)
	} else {
		return fake.getUserSpacesReturns.result1, fake.getUserSpacesReturns.result2
	}
}

func (fake *Client) GetUserSpacesCallCount() int {
	fake.getUserSpacesMutex.RLock()
	defer fake.getUserSpacesMutex.RUnlock()
	return len(fake.getUserSpacesArgsForCall)
}

func (fake *Client) GetUserSpacesArgsForCall(i int) (string, []handlers.Space) {
	fake.getUserSpacesMutex.RLock()
	defer fake.getUserSpacesMutex.RUnlock()
	return fake.getUserSpacesArgsForCall[i].userGuid, fake.getUserSpacesArgsForCall[i].spaces
}

func (fake *Client) GetUserSpacesReturns(result1 []handlers.Space, result2 error) {
	fake.GetUserSpacesStub = nil
	fake.getUserSpacesReturns = struct {
		result1 []handlers.Space
		result2 error
	}{result1, result2}
}

func (fake *Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSpaceGuidsMutex.RLock()
	defer fake.getSpaceGuidsMutex.RUnlock()
	fake.getSpacesMutex.RLock()
	defer fake.getSpacesMutex.RUnlock()
	fake.getUserSpacesMutex.RLock()
	defer fake.getUserSpacesMutex.RUnlock()
	return fake.invocations
}

func (fake *Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
