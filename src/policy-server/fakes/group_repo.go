// This file was generated by counterfeiter
package fakes

import (
	"policy-server/store"
	"sync"
)

type GroupRepo struct {
	CreateStub        func(store.Transaction, string) (int, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 store.Transaction
		arg2 string
	}
	createReturns struct {
		result1 int
		result2 error
	}
	GetIDStub        func(store.Transaction, string) (int, error)
	getIDMutex       sync.RWMutex
	getIDArgsForCall []struct {
		arg1 store.Transaction
		arg2 string
	}
	getIDReturns struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *GroupRepo) Create(arg1 store.Transaction, arg2 string) (int, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 store.Transaction
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *GroupRepo) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *GroupRepo) CreateArgsForCall(i int) (store.Transaction, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1, fake.createArgsForCall[i].arg2
}

func (fake *GroupRepo) CreateReturns(result1 int, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *GroupRepo) GetID(arg1 store.Transaction, arg2 string) (int, error) {
	fake.getIDMutex.Lock()
	fake.getIDArgsForCall = append(fake.getIDArgsForCall, struct {
		arg1 store.Transaction
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetID", []interface{}{arg1, arg2})
	fake.getIDMutex.Unlock()
	if fake.GetIDStub != nil {
		return fake.GetIDStub(arg1, arg2)
	} else {
		return fake.getIDReturns.result1, fake.getIDReturns.result2
	}
}

func (fake *GroupRepo) GetIDCallCount() int {
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	return len(fake.getIDArgsForCall)
}

func (fake *GroupRepo) GetIDArgsForCall(i int) (store.Transaction, string) {
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	return fake.getIDArgsForCall[i].arg1, fake.getIDArgsForCall[i].arg2
}

func (fake *GroupRepo) GetIDReturns(result1 int, result2 error) {
	fake.GetIDStub = nil
	fake.getIDReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *GroupRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	return fake.invocations
}

func (fake *GroupRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.GroupRepo = new(GroupRepo)
