// This file was generated by counterfeiter
package fakes

import (
	"lib/models"
	"sync"
)

type PolicyGuardCCClient struct {
	GetSpaceGuidsStub        func(token string, appGuids []string) ([]string, error)
	getSpaceGuidsMutex       sync.RWMutex
	getSpaceGuidsArgsForCall []struct {
		token    string
		appGuids []string
	}
	getSpaceGuidsReturns struct {
		result1 []string
		result2 error
	}
	GetSpaceStub        func(token, spaceGuid string) (models.Space, error)
	getSpaceMutex       sync.RWMutex
	getSpaceArgsForCall []struct {
		token     string
		spaceGuid string
	}
	getSpaceReturns struct {
		result1 models.Space
		result2 error
	}
	GetUserSpacesStub        func(token, userGuid string, spaces []models.Space) ([]models.Space, error)
	getUserSpacesMutex       sync.RWMutex
	getUserSpacesArgsForCall []struct {
		token    string
		userGuid string
		spaces   []models.Space
	}
	getUserSpacesReturns struct {
		result1 []models.Space
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PolicyGuardCCClient) GetSpaceGuids(token string, appGuids []string) ([]string, error) {
	var appGuidsCopy []string
	if appGuids != nil {
		appGuidsCopy = make([]string, len(appGuids))
		copy(appGuidsCopy, appGuids)
	}
	fake.getSpaceGuidsMutex.Lock()
	fake.getSpaceGuidsArgsForCall = append(fake.getSpaceGuidsArgsForCall, struct {
		token    string
		appGuids []string
	}{token, appGuidsCopy})
	fake.recordInvocation("GetSpaceGuids", []interface{}{token, appGuidsCopy})
	fake.getSpaceGuidsMutex.Unlock()
	if fake.GetSpaceGuidsStub != nil {
		return fake.GetSpaceGuidsStub(token, appGuids)
	} else {
		return fake.getSpaceGuidsReturns.result1, fake.getSpaceGuidsReturns.result2
	}
}

func (fake *PolicyGuardCCClient) GetSpaceGuidsCallCount() int {
	fake.getSpaceGuidsMutex.RLock()
	defer fake.getSpaceGuidsMutex.RUnlock()
	return len(fake.getSpaceGuidsArgsForCall)
}

func (fake *PolicyGuardCCClient) GetSpaceGuidsArgsForCall(i int) (string, []string) {
	fake.getSpaceGuidsMutex.RLock()
	defer fake.getSpaceGuidsMutex.RUnlock()
	return fake.getSpaceGuidsArgsForCall[i].token, fake.getSpaceGuidsArgsForCall[i].appGuids
}

func (fake *PolicyGuardCCClient) GetSpaceGuidsReturns(result1 []string, result2 error) {
	fake.GetSpaceGuidsStub = nil
	fake.getSpaceGuidsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *PolicyGuardCCClient) GetSpace(token string, spaceGuid string) (models.Space, error) {
	fake.getSpaceMutex.Lock()
	fake.getSpaceArgsForCall = append(fake.getSpaceArgsForCall, struct {
		token     string
		spaceGuid string
	}{token, spaceGuid})
	fake.recordInvocation("GetSpace", []interface{}{token, spaceGuid})
	fake.getSpaceMutex.Unlock()
	if fake.GetSpaceStub != nil {
		return fake.GetSpaceStub(token, spaceGuid)
	} else {
		return fake.getSpaceReturns.result1, fake.getSpaceReturns.result2
	}
}

func (fake *PolicyGuardCCClient) GetSpaceCallCount() int {
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	return len(fake.getSpaceArgsForCall)
}

func (fake *PolicyGuardCCClient) GetSpaceArgsForCall(i int) (string, string) {
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	return fake.getSpaceArgsForCall[i].token, fake.getSpaceArgsForCall[i].spaceGuid
}

func (fake *PolicyGuardCCClient) GetSpaceReturns(result1 models.Space, result2 error) {
	fake.GetSpaceStub = nil
	fake.getSpaceReturns = struct {
		result1 models.Space
		result2 error
	}{result1, result2}
}

func (fake *PolicyGuardCCClient) GetUserSpaces(token string, userGuid string, spaces []models.Space) ([]models.Space, error) {
	var spacesCopy []models.Space
	if spaces != nil {
		spacesCopy = make([]models.Space, len(spaces))
		copy(spacesCopy, spaces)
	}
	fake.getUserSpacesMutex.Lock()
	fake.getUserSpacesArgsForCall = append(fake.getUserSpacesArgsForCall, struct {
		token    string
		userGuid string
		spaces   []models.Space
	}{token, userGuid, spacesCopy})
	fake.recordInvocation("GetUserSpaces", []interface{}{token, userGuid, spacesCopy})
	fake.getUserSpacesMutex.Unlock()
	if fake.GetUserSpacesStub != nil {
		return fake.GetUserSpacesStub(token, userGuid, spaces)
	} else {
		return fake.getUserSpacesReturns.result1, fake.getUserSpacesReturns.result2
	}
}

func (fake *PolicyGuardCCClient) GetUserSpacesCallCount() int {
	fake.getUserSpacesMutex.RLock()
	defer fake.getUserSpacesMutex.RUnlock()
	return len(fake.getUserSpacesArgsForCall)
}

func (fake *PolicyGuardCCClient) GetUserSpacesArgsForCall(i int) (string, string, []models.Space) {
	fake.getUserSpacesMutex.RLock()
	defer fake.getUserSpacesMutex.RUnlock()
	return fake.getUserSpacesArgsForCall[i].token, fake.getUserSpacesArgsForCall[i].userGuid, fake.getUserSpacesArgsForCall[i].spaces
}

func (fake *PolicyGuardCCClient) GetUserSpacesReturns(result1 []models.Space, result2 error) {
	fake.GetUserSpacesStub = nil
	fake.getUserSpacesReturns = struct {
		result1 []models.Space
		result2 error
	}{result1, result2}
}

func (fake *PolicyGuardCCClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSpaceGuidsMutex.RLock()
	defer fake.getSpaceGuidsMutex.RUnlock()
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	fake.getUserSpacesMutex.RLock()
	defer fake.getUserSpacesMutex.RUnlock()
	return fake.invocations
}

func (fake *PolicyGuardCCClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
