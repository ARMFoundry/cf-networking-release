// This file was generated by counterfeiter
package fakes

import (
	"policy-server/models"
	"sync"
)

type PolicyGuardCCClient struct {
	GetSpaceGUIDsStub        func(token string, appGUIDs []string) ([]string, error)
	getSpaceGUIDsMutex       sync.RWMutex
	getSpaceGUIDsArgsForCall []struct {
		token    string
		appGUIDs []string
	}
	getSpaceGUIDsReturns struct {
		result1 []string
		result2 error
	}
	GetSpaceStub        func(token, spaceGUID string) (models.Space, error)
	getSpaceMutex       sync.RWMutex
	getSpaceArgsForCall []struct {
		token     string
		spaceGUID string
	}
	getSpaceReturns struct {
		result1 models.Space
		result2 error
	}
	GetUserSpaceStub        func(token, userGUID string, spaces models.Space) (models.Space, error)
	getUserSpaceMutex       sync.RWMutex
	getUserSpaceArgsForCall []struct {
		token    string
		userGUID string
		spaces   models.Space
	}
	getUserSpaceReturns struct {
		result1 models.Space
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PolicyGuardCCClient) GetSpaceGUIDs(token string, appGUIDs []string) ([]string, error) {
	var appGUIDsCopy []string
	if appGUIDs != nil {
		appGUIDsCopy = make([]string, len(appGUIDs))
		copy(appGUIDsCopy, appGUIDs)
	}
	fake.getSpaceGUIDsMutex.Lock()
	fake.getSpaceGUIDsArgsForCall = append(fake.getSpaceGUIDsArgsForCall, struct {
		token    string
		appGUIDs []string
	}{token, appGUIDsCopy})
	fake.recordInvocation("GetSpaceGUIDs", []interface{}{token, appGUIDsCopy})
	fake.getSpaceGUIDsMutex.Unlock()
	if fake.GetSpaceGUIDsStub != nil {
		return fake.GetSpaceGUIDsStub(token, appGUIDs)
	} else {
		return fake.getSpaceGUIDsReturns.result1, fake.getSpaceGUIDsReturns.result2
	}
}

func (fake *PolicyGuardCCClient) GetSpaceGUIDsCallCount() int {
	fake.getSpaceGUIDsMutex.RLock()
	defer fake.getSpaceGUIDsMutex.RUnlock()
	return len(fake.getSpaceGUIDsArgsForCall)
}

func (fake *PolicyGuardCCClient) GetSpaceGUIDsArgsForCall(i int) (string, []string) {
	fake.getSpaceGUIDsMutex.RLock()
	defer fake.getSpaceGUIDsMutex.RUnlock()
	return fake.getSpaceGUIDsArgsForCall[i].token, fake.getSpaceGUIDsArgsForCall[i].appGUIDs
}

func (fake *PolicyGuardCCClient) GetSpaceGUIDsReturns(result1 []string, result2 error) {
	fake.GetSpaceGUIDsStub = nil
	fake.getSpaceGUIDsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *PolicyGuardCCClient) GetSpace(token string, spaceGUID string) (models.Space, error) {
	fake.getSpaceMutex.Lock()
	fake.getSpaceArgsForCall = append(fake.getSpaceArgsForCall, struct {
		token     string
		spaceGUID string
	}{token, spaceGUID})
	fake.recordInvocation("GetSpace", []interface{}{token, spaceGUID})
	fake.getSpaceMutex.Unlock()
	if fake.GetSpaceStub != nil {
		return fake.GetSpaceStub(token, spaceGUID)
	} else {
		return fake.getSpaceReturns.result1, fake.getSpaceReturns.result2
	}
}

func (fake *PolicyGuardCCClient) GetSpaceCallCount() int {
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	return len(fake.getSpaceArgsForCall)
}

func (fake *PolicyGuardCCClient) GetSpaceArgsForCall(i int) (string, string) {
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	return fake.getSpaceArgsForCall[i].token, fake.getSpaceArgsForCall[i].spaceGUID
}

func (fake *PolicyGuardCCClient) GetSpaceReturns(result1 models.Space, result2 error) {
	fake.GetSpaceStub = nil
	fake.getSpaceReturns = struct {
		result1 models.Space
		result2 error
	}{result1, result2}
}

func (fake *PolicyGuardCCClient) GetUserSpace(token string, userGUID string, spaces models.Space) (models.Space, error) {
	fake.getUserSpaceMutex.Lock()
	fake.getUserSpaceArgsForCall = append(fake.getUserSpaceArgsForCall, struct {
		token    string
		userGUID string
		spaces   models.Space
	}{token, userGUID, spaces})
	fake.recordInvocation("GetUserSpace", []interface{}{token, userGUID, spaces})
	fake.getUserSpaceMutex.Unlock()
	if fake.GetUserSpaceStub != nil {
		return fake.GetUserSpaceStub(token, userGUID, spaces)
	} else {
		return fake.getUserSpaceReturns.result1, fake.getUserSpaceReturns.result2
	}
}

func (fake *PolicyGuardCCClient) GetUserSpaceCallCount() int {
	fake.getUserSpaceMutex.RLock()
	defer fake.getUserSpaceMutex.RUnlock()
	return len(fake.getUserSpaceArgsForCall)
}

func (fake *PolicyGuardCCClient) GetUserSpaceArgsForCall(i int) (string, string, models.Space) {
	fake.getUserSpaceMutex.RLock()
	defer fake.getUserSpaceMutex.RUnlock()
	return fake.getUserSpaceArgsForCall[i].token, fake.getUserSpaceArgsForCall[i].userGUID, fake.getUserSpaceArgsForCall[i].spaces
}

func (fake *PolicyGuardCCClient) GetUserSpaceReturns(result1 models.Space, result2 error) {
	fake.GetUserSpaceStub = nil
	fake.getUserSpaceReturns = struct {
		result1 models.Space
		result2 error
	}{result1, result2}
}

func (fake *PolicyGuardCCClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSpaceGUIDsMutex.RLock()
	defer fake.getSpaceGUIDsMutex.RUnlock()
	fake.getSpaceMutex.RLock()
	defer fake.getSpaceMutex.RUnlock()
	fake.getUserSpaceMutex.RLock()
	defer fake.getUserSpaceMutex.RUnlock()
	return fake.invocations
}

func (fake *PolicyGuardCCClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
