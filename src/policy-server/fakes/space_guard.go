// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"policy-server/uaa_client"
	"sync"
)

type SpaceGuard struct {
	CheckRequestStub        func(request *http.Request, tokenData uaa_client.CheckTokenResponse) error
	checkRequestMutex       sync.RWMutex
	checkRequestArgsForCall []struct {
		request   *http.Request
		tokenData uaa_client.CheckTokenResponse
	}
	checkRequestReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SpaceGuard) CheckRequest(request *http.Request, tokenData uaa_client.CheckTokenResponse) error {
	fake.checkRequestMutex.Lock()
	fake.checkRequestArgsForCall = append(fake.checkRequestArgsForCall, struct {
		request   *http.Request
		tokenData uaa_client.CheckTokenResponse
	}{request, tokenData})
	fake.recordInvocation("CheckRequest", []interface{}{request, tokenData})
	fake.checkRequestMutex.Unlock()
	if fake.CheckRequestStub != nil {
		return fake.CheckRequestStub(request, tokenData)
	} else {
		return fake.checkRequestReturns.result1
	}
}

func (fake *SpaceGuard) CheckRequestCallCount() int {
	fake.checkRequestMutex.RLock()
	defer fake.checkRequestMutex.RUnlock()
	return len(fake.checkRequestArgsForCall)
}

func (fake *SpaceGuard) CheckRequestArgsForCall(i int) (*http.Request, uaa_client.CheckTokenResponse) {
	fake.checkRequestMutex.RLock()
	defer fake.checkRequestMutex.RUnlock()
	return fake.checkRequestArgsForCall[i].request, fake.checkRequestArgsForCall[i].tokenData
}

func (fake *SpaceGuard) CheckRequestReturns(result1 error) {
	fake.CheckRequestStub = nil
	fake.checkRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *SpaceGuard) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkRequestMutex.RLock()
	defer fake.checkRequestMutex.RUnlock()
	return fake.invocations
}

func (fake *SpaceGuard) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
