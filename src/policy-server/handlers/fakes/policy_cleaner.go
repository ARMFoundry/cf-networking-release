// This file was generated by counterfeiter
package fakes

import (
	"policy-server/models"
	"sync"
)

type PolicyCleaner struct {
	DeleteStalePoliciesStub        func() ([]models.Policy, error)
	deleteStalePoliciesMutex       sync.RWMutex
	deleteStalePoliciesArgsForCall []struct{}
	deleteStalePoliciesReturns     struct {
		result1 []models.Policy
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PolicyCleaner) DeleteStalePolicies() ([]models.Policy, error) {
	fake.deleteStalePoliciesMutex.Lock()
	fake.deleteStalePoliciesArgsForCall = append(fake.deleteStalePoliciesArgsForCall, struct{}{})
	fake.recordInvocation("DeleteStalePolicies", []interface{}{})
	fake.deleteStalePoliciesMutex.Unlock()
	if fake.DeleteStalePoliciesStub != nil {
		return fake.DeleteStalePoliciesStub()
	} else {
		return fake.deleteStalePoliciesReturns.result1, fake.deleteStalePoliciesReturns.result2
	}
}

func (fake *PolicyCleaner) DeleteStalePoliciesCallCount() int {
	fake.deleteStalePoliciesMutex.RLock()
	defer fake.deleteStalePoliciesMutex.RUnlock()
	return len(fake.deleteStalePoliciesArgsForCall)
}

func (fake *PolicyCleaner) DeleteStalePoliciesReturns(result1 []models.Policy, result2 error) {
	fake.DeleteStalePoliciesStub = nil
	fake.deleteStalePoliciesReturns = struct {
		result1 []models.Policy
		result2 error
	}{result1, result2}
}

func (fake *PolicyCleaner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteStalePoliciesMutex.RLock()
	defer fake.deleteStalePoliciesMutex.RUnlock()
	return fake.invocations
}

func (fake *PolicyCleaner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
