// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"policy-server/handlers"
	"policy-server/store"
	"sync"
)

type EgressDestinationMapper struct {
	AsBytesStub        func(egressDestinations []store.EgressDestination) ([]byte, error)
	asBytesMutex       sync.RWMutex
	asBytesArgsForCall []struct {
		egressDestinations []store.EgressDestination
	}
	asBytesReturns struct {
		result1 []byte
		result2 error
	}
	asBytesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EgressDestinationMapper) AsBytes(egressDestinations []store.EgressDestination) ([]byte, error) {
	var egressDestinationsCopy []store.EgressDestination
	if egressDestinations != nil {
		egressDestinationsCopy = make([]store.EgressDestination, len(egressDestinations))
		copy(egressDestinationsCopy, egressDestinations)
	}
	fake.asBytesMutex.Lock()
	ret, specificReturn := fake.asBytesReturnsOnCall[len(fake.asBytesArgsForCall)]
	fake.asBytesArgsForCall = append(fake.asBytesArgsForCall, struct {
		egressDestinations []store.EgressDestination
	}{egressDestinationsCopy})
	fake.recordInvocation("AsBytes", []interface{}{egressDestinationsCopy})
	fake.asBytesMutex.Unlock()
	if fake.AsBytesStub != nil {
		return fake.AsBytesStub(egressDestinations)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.asBytesReturns.result1, fake.asBytesReturns.result2
}

func (fake *EgressDestinationMapper) AsBytesCallCount() int {
	fake.asBytesMutex.RLock()
	defer fake.asBytesMutex.RUnlock()
	return len(fake.asBytesArgsForCall)
}

func (fake *EgressDestinationMapper) AsBytesArgsForCall(i int) []store.EgressDestination {
	fake.asBytesMutex.RLock()
	defer fake.asBytesMutex.RUnlock()
	return fake.asBytesArgsForCall[i].egressDestinations
}

func (fake *EgressDestinationMapper) AsBytesReturns(result1 []byte, result2 error) {
	fake.AsBytesStub = nil
	fake.asBytesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationMapper) AsBytesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.AsBytesStub = nil
	if fake.asBytesReturnsOnCall == nil {
		fake.asBytesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.asBytesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *EgressDestinationMapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.asBytesMutex.RLock()
	defer fake.asBytesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EgressDestinationMapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.EgressDestinationMapper = new(EgressDestinationMapper)
