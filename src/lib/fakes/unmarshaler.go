// This file was generated by counterfeiter
package fakes

import (
	"lib/marshal"
	"sync"
)

type Unmarshaler struct {
	UnmarshalStub        func(input []byte, output interface{}) error
	unmarshalMutex       sync.RWMutex
	unmarshalArgsForCall []struct {
		input  []byte
		output interface{}
	}
	unmarshalReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Unmarshaler) Unmarshal(input []byte, output interface{}) error {
	var inputCopy []byte
	if input != nil {
		inputCopy = make([]byte, len(input))
		copy(inputCopy, input)
	}
	fake.unmarshalMutex.Lock()
	fake.unmarshalArgsForCall = append(fake.unmarshalArgsForCall, struct {
		input  []byte
		output interface{}
	}{inputCopy, output})
	fake.recordInvocation("Unmarshal", []interface{}{inputCopy, output})
	fake.unmarshalMutex.Unlock()
	if fake.UnmarshalStub != nil {
		return fake.UnmarshalStub(input, output)
	} else {
		return fake.unmarshalReturns.result1
	}
}

func (fake *Unmarshaler) UnmarshalCallCount() int {
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	return len(fake.unmarshalArgsForCall)
}

func (fake *Unmarshaler) UnmarshalArgsForCall(i int) ([]byte, interface{}) {
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	return fake.unmarshalArgsForCall[i].input, fake.unmarshalArgsForCall[i].output
}

func (fake *Unmarshaler) UnmarshalReturns(result1 error) {
	fake.UnmarshalStub = nil
	fake.unmarshalReturns = struct {
		result1 error
	}{result1}
}

func (fake *Unmarshaler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	return fake.invocations
}

func (fake *Unmarshaler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ marshal.Unmarshaler = new(Unmarshaler)
