// This file was generated by counterfeiter
package fakes

import (
	"netman-agent/models"
	"sync"
)

type PolicyClient struct {
	AddPolicyStub        func(models.Policy) error
	addPolicyMutex       sync.RWMutex
	addPolicyArgsForCall []struct {
		arg1 models.Policy
	}
	addPolicyReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PolicyClient) AddPolicy(arg1 models.Policy) error {
	fake.addPolicyMutex.Lock()
	fake.addPolicyArgsForCall = append(fake.addPolicyArgsForCall, struct {
		arg1 models.Policy
	}{arg1})
	fake.recordInvocation("AddPolicy", []interface{}{arg1})
	fake.addPolicyMutex.Unlock()
	if fake.AddPolicyStub != nil {
		return fake.AddPolicyStub(arg1)
	} else {
		return fake.addPolicyReturns.result1
	}
}

func (fake *PolicyClient) AddPolicyCallCount() int {
	fake.addPolicyMutex.RLock()
	defer fake.addPolicyMutex.RUnlock()
	return len(fake.addPolicyArgsForCall)
}

func (fake *PolicyClient) AddPolicyArgsForCall(i int) models.Policy {
	fake.addPolicyMutex.RLock()
	defer fake.addPolicyMutex.RUnlock()
	return fake.addPolicyArgsForCall[i].arg1
}

func (fake *PolicyClient) AddPolicyReturns(result1 error) {
	fake.AddPolicyStub = nil
	fake.addPolicyReturns = struct {
		result1 error
	}{result1}
}

func (fake *PolicyClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPolicyMutex.RLock()
	defer fake.addPolicyMutex.RUnlock()
	return fake.invocations
}

func (fake *PolicyClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
