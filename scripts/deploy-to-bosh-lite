#!/bin/bash

# Simple script to download binary releases, update, create, and upload source
# releases, generate deployment manifests and deploy releases to bosh-lite.
#
# We assume you have already cloned the necessary releases into ~/workspace.

set -eu

error() {
    echo "[ERROR]: $1" 2>&1
    exit 1
}

create_bosh_env() {
bosh-cli create-env ~/workspace/bosh-deployment/bosh.yml \
  --state "~/workspace/container-networking-deployments/environments/local/state.json" \
  -o ~/workspace/bosh-deployment/virtualbox/cpi.yml \
  -o ~/workspace/bosh-deployment/virtualbox/outbound-network.yml \
  -o ~/workspace/bosh-deployment/bosh-lite.yml \
  -o ~/workspace/bosh-deployment/bosh-lite-runc.yml \
  -o ~/workspace/bosh-deployment/jumpbox-user.yml \
  --vars-store "~/workspace/container-networking-deployments/environments/local/creds.yml" \
  -v director_name="Bosh Lite Director" \
  -v internal_ip=192.168.50.6 \
  -v internal_gw=192.168.50.1 \
  -v internal_cidr=192.168.50.0/24 \
  -v outbound_network_name="NatNetwork"
}

set_bosh_env() {
  bosh-cli -e 192.168.50.6 --ca-cert <(bosh-cli int "~/workspace/container-networking-deployments/environments/local/creds.yml" --path /director_ssl/ca) alias-env vbox
  export BOSH_CLIENT="admin"
  export BOSH_CLIENT_SECRET="$(bosh-cli int "~/workspace/container-networking-deployments/environments/local/creds.yml" --path /admin_password)"
  export BOSH_ENVIRONMENT="vbox"
  export BOSH_DEPLOYMENT="cf"
  export BOSH_CA_CERT="$(bosh-cli int "~/workspace/container-networking-deployments/environments/local/creds.yml" --path /director_ssl/ca)"
}

upload_bosh_stemcell() {
  bosh-cli -e vbox upload-stemcell https://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent
}

upload_cloud_config() {
  bosh-cli -e vbox -n update-cloud-config ~/workspace/cf-deployment/bosh-lite/cloud-config.yml
}

deploy_cf() {
  bosh-cli deploy -n ~/workspace/cf-deployment/cf-deployment.yml \
  -o ~/workspace/cf-networking-release/manifest-generation/opsfiles/cf-networking.yml \
  -o ~/workspace/cf-deployment/operations/bosh-lite.yml \
  -o ~/workspace/cf-networking-release/manifest-generation/opsfiles/postgres.yml \
  --vars-store ~/deployments/vbox/deployment-vars.yml \
  -v system_domain=bosh-lite.com
}

download_release() {
    local org=$1
    local release=$2

    curl -L -o $download_dir/${release}.tgz https://bosh.io/d/github.com/${org}/${release}
}

upload_release() {
    local release=$1

    bosh upload release ${download_dir}/${release}.tgz
}

verify_clone_exists() {
    local release_name=$1

    [[ -d ${workspace_dir}/${release_name} ]] || error "${release_name} needs to be cloned"
    if [[ "$(git -C ${workspace_dir}/${release_name} rev-parse --is-inside-work-tree)" != "true" ]]; then
        error "${release_name} is not a git repo"
    fi
}

has_upstream() {
    git rev-parse @{u} > /dev/null 2>&1
}

checkout_and_update() {
    local branch=$1

    git checkout $branch

    git pull
}

update_dependencies() {
    download_release cloudfoundry-incubator etcd-release
    upload_release etcd-release

    download_release cloudfoundry-incubator cf-networking-release
    upload_release cf-networking-release

    download_release cloudfoundry cflinuxfs2-rootfs-release
    upload_release cflinuxfs2-rootfs-release

    download_release cloudfoundry cf-release
    upload_release cf-release

    download_release cloudfoundry diego-release
    upload_release diego-release

    download_release cloudfoundry garden-runc-release
    upload_release garden-runc-release

    ./scripts/update
    bosh create release --force
    bosh upload release
}

main() {
    create_bosh_env
    set_bosh_env

    if [ $upload_stemcell == true ]; then
      upload_bosh_stemcell
    fi

    upload_cloud_config

    update_dependencies

    deploy_cf
}

upload_stemcell=true
download_dir=$(mktemp -d -t deploy_bosh_lite.XXXXXXX)
workspace_dir=$(cd $(dirname $0)/../.. && pwd)

while getopts "d:w:s" opt; do
    case ${opt} in
        s)
            upload_stemcell=true
        ;;

        d)
            download_dir=$OPTARG
        ;;

        w)
            workspace_dir=$OPTARG
        ;;
    esac
done

main
