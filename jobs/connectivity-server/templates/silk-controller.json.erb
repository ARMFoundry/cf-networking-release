<%=
  require 'json'

  def db_params
    ['username', 'password', 'host', 'port', 'name'].map {|name| "cf_networking.connectivity_server.database.#{name}"}
  end

  def param_exists? param
    p(param) != ""
  end

  def subnet_prefix_length
    size = p("cf_networking.subnet_prefix_length")
    if size < 1 || size > 30
      raise "'cf_networking.subnet_prefix_length' must be a value between 1-30"
    end
    size
  end

  def connection_string
    unless db_params.all? {|p| param_exists?(p)}
      raise "all of the following parameters must be specified #{db_params.join(",")}"
    end

    values = db_params.map {|param| p(param)}
    # Note: order of the params is important here, it has to be username, password, host, port, name in that order
    driver = p("cf_networking.connectivity_server.database.type")
    case driver
    when 'mysql'
      sprintf "%s:%s@tcp(%s:%s)/%s?parseTime=true", *values
    when 'postgres'
      sprintf "postgres://%s:%s@%s:%s/%s?sslmode=disable", *values
    else
      raise "unknown driver #{driver}"
    end
  end

  toRender = {
    "debug_server_port" => p("cf_networking.connectivity_server.debug_server_port"),
    "listen_host" => p("cf_networking.connectivity_server.listen_host"),
    "listen_port" => p("cf_networking.connectivity_server.listen_port"),
    "ca_cert_file" => "/var/vcap/jobs/connectivity-server/config/certs/ca.crt",
    "server_cert_file" => "/var/vcap/jobs/connectivity-server/config/certs/server.crt",
    "server_key_file" => "/var/vcap/jobs/connectivity-server/config/certs/server.key",
    "network" => p("cf_networking.network"),
    "subnet_prefix_length" => subnet_prefix_length,
    "database" => {
      "type" => p("cf_networking.connectivity_server.database.type"),
      "connection_string" => connection_string,
    },
  }

  JSON.pretty_generate(toRender)
%>
